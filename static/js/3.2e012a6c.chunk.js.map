{"version":3,"sources":["components/UI/Input/Input.js","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","input","props","inputElement","inputClasses","invalid","shouldValidate","touched","push","elementType","a","createElement","Object","assign","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","label","checkoutSummary","react_default","style","width","margin","Burger","ingredients","Button","variant","onClick","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","type","placeholder","validation","required","minLength","valid","street","zipCode","maxLength","isNumeric","country","email","isEmail","deliveryMethod","formIsValid","orderHandler","event","preventDefault","fromData","formElementIdentifier","_this","order","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","defineProperty","setState","_this2","this","formElementsArray","id","config","form","onSubmit","formElement","Input","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","Redirect","to","purchasedRedirect","purchased","CheckoutSummary_CheckoutSummary","Route","path","match","component"],"mappings":"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","file":"static/js/3.2e012a6c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './Input.css';\r\n\r\n\r\nconst input = (props) => {\r\n\r\n    let inputElement = null;\r\n    const inputClasses = ['InputElement']\r\n\r\n    if(props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push('Invalid');\r\n    }\r\n\r\n    switch(props.elementType){\r\n        case ('input'):\r\n           inputElement = <input className={inputClasses.join(' ')} {...props.elementConfig} value={props.value} onChange={props.changed} />;\r\n           break;\r\n        case ('textarea'):\r\n            inputElement = <textarea className={inputClasses.join(' ')} {...props.elementConfig} value={props.value} onChange={props.changed}/>;\r\n            break;\r\n        case ('select'):\r\n            inputElement = (  <select className={inputClasses.join(' ')} value={props.value} onChange={props.changed}>\r\n                                {props.elementConfig.options.map(option => (\r\n                                    <option key={option.value} value={option.value}>{option.displayValue}</option>\r\n                                ))}\r\n                             </select>\r\n                           );\r\n            break;\r\n        default:\r\n            inputElement = <input className={inputClasses.join(' ')} {...props.elementConfig} value={props.value} />;\r\n    }\r\n\r\n    return(\r\n        <div className='Input'>\r\n            <label className='Label'>{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default input;","import React from 'react';\r\n\r\nimport Burger from '../../Burger/Burger';\r\nimport { Button } from 'react-bootstrap';\r\nimport './CheckoutSummary.css';\r\n\r\nconst checkoutSummary = (props) =>  {\r\n    return (\r\n        <div className='CheckoutSummary'>\r\n            <h2>We hopes it tastes better!!</h2>\r\n            <div style={{width: '100%', margin: 'auto'}}>\r\n                <Burger ingredients={props.ingredients} />\r\n            </div>\r\n            <div className='Button'> \r\n                <Button variant=\"danger\" onClick={props.checkoutCancelled}>CANCEL</Button>\r\n                <Button variant=\"success\" onClick={props.checkoutContinued}>CONTINUE</Button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default checkoutSummary;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { Button } from 'react-bootstrap';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport './ContactData.css';\r\nimport axios from '../../../axios-orders';\r\nimport Input from '../../../components/UI/Input/Input';\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\r\nimport * as actions from '../../../store/actions/index';\r\nimport { updateObject, checkValidity } from '../../../shared/utility';\r\n\r\nclass ContactData extends Component {\r\n\r\n    state = {\r\n        orderForm: {\r\n\r\n                name: {\r\n                        elementType: 'input',\r\n                        elementConfig: {\r\n                            type: 'text',\r\n                            placeholder: 'Your Name'\r\n                        },\r\n                        value: '',\r\n                        validation: {\r\n                            required: true,\r\n                            minLength: 4\r\n                          },\r\n                          valid: false,\r\n                          touched: false\r\n                       },\r\n                street: {\r\n                            elementType: 'input',\r\n                            elementConfig: {\r\n                                type: 'text',\r\n                                placeholder: 'Street'\r\n                            },\r\n                            value: '',\r\n                            validation: {\r\n                                required: true,\r\n                                minLength: 5\r\n                              },\r\n                              valid: false,\r\n                              touched: false\r\n                        },\r\n                zipCode: {\r\n                            elementType: 'input',\r\n                            elementConfig: {\r\n                                type: 'text',\r\n                                placeholder: 'Zip Code'\r\n                            },\r\n                            value: '',\r\n                            validation: {\r\n                                required: true,\r\n                                minLength: 5,\r\n                                maxLength: 8,\r\n                                isNumeric: true\r\n                              },\r\n                              valid: false,\r\n                              touched: false\r\n                              \r\n                              \r\n                        },\r\n                country: {\r\n                            elementType: 'input',\r\n                            elementConfig: {\r\n                                type: 'text',\r\n                                placeholder: 'Country'\r\n                            },\r\n                            value: '',\r\n                            validation: {\r\n                                required: true,\r\n                                minLength: 2\r\n                              },\r\n                              valid: false,\r\n                              touched: false\r\n                        },\r\n                email: {\r\n                            elementType: 'input',\r\n                            elementConfig: {\r\n                                type: 'email',\r\n                                placeholder: 'Your Email'\r\n                            },\r\n                            value: '',\r\n                            validation: {\r\n                                required: true,\r\n                                isEmail: true\r\n                              },\r\n                              valid: false,\r\n                              touched: false\r\n                        },\r\n                deliveryMethod: {\r\n                            elementType: 'select',\r\n                            elementConfig: {\r\n                                options: [\r\n                                    { value: 'cheapest', displayValue: 'Cheapest' },\r\n                                    { value: 'fastest', displayValue: 'Fastest' }\r\n                                ]\r\n                            },\r\n                            value: 'cheapest',\r\n                            valid: true,\r\n                            validation: {},\r\n                        }\r\n           },\r\n           formIsValid: false\r\n    }\r\n\r\n    orderHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        const fromData = {};\r\n        for (let formElementIdentifier in this.state.orderForm) {\r\n            fromData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\r\n        }\r\n\r\n      \r\n        const order = {\r\n            ingredients: this.props.ings,\r\n            price: this.props.price,\r\n            orderData: fromData,\r\n            userId: this.props.userId\r\n        }\r\n\r\n        this.props.onOrderBurger(order, this.props.token);\r\n        \r\n    }\r\n\r\n    \r\n    inputChangedHandler = (event, inputIdentifier) => {\r\n        \r\n        const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier], {\r\n            value: event.target.value,\r\n            valid: checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\r\n            touched: true\r\n        }); \r\n\r\n        const updatedOrderForm = updateObject(this.state.orderForm, {\r\n            [inputIdentifier]: updatedFormElement\r\n        });\r\n\r\n        \r\n        let formIsValid = true;\r\n        for (let inputIdentifier in updatedOrderForm){\r\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\r\n        }\r\n\r\n        this.setState({ orderForm: updatedOrderForm, formIsValid: formIsValid });\r\n    }\r\n\r\n    render() {\r\n\r\n        const formElementsArray = [];\r\n        for (let key in this.state.orderForm) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.orderForm[key]\r\n            });\r\n        }\r\n\r\n        let form = (\r\n               <form onSubmit={this.orderHandler}>\r\n                    \r\n                    {formElementsArray.map(formElement => (\r\n                        <Input \r\n                           key={formElement.id}\r\n                           elementType={formElement.config.elementType} \r\n                           elementConfig={formElement.config.elementConfig}\r\n                           value={formElement.config.value}\r\n                           invalid={!formElement.config.valid}\r\n                           shouldValidate={formElement.config.validation}\r\n                           touched={formElement.config.touched}\r\n                           changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n                        />\r\n                    ))}\r\n                    \r\n                     \r\n                        <Button onClick={this.orderHandler} disabled={!this.state.formIsValid} variant=\"success\" >ORDER</Button>\r\n                    \r\n\r\n                </form>\r\n        );\r\n        if (this.props.loading) {\r\n            form = <Spinner />;\r\n        }\r\n        return (\r\n            <div className='ContactData'>\r\n                <h4>Enter Your Contact Data</h4>\r\n                {form}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        price: state.burgerBuilder.totalPrice,\r\n        loading: state.order.loading,\r\n        token: state.auth.token,\r\n        userId: state.auth.userId\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React, { Component } from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\r\nimport ContactData from './ContactData/ContactData';\r\n\r\nclass Checkout extends Component {\r\n\r\n    checkoutCancelledHandler = () => {\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    checkoutContinuedHandler = () => {\r\n        this.props.history.replace('/checkout/contact-data');\r\n    }\r\n\r\n    render() {\r\n        let summary = <Redirect to=\"/\" />\r\n\r\n        if (this.props.ings) {\r\n\r\n            const purchasedRedirect = this.props.purchased ? <Redirect to=\"/\" /> : null;\r\n\r\n            summary = (<div>\r\n                          {purchasedRedirect}\r\n                        <CheckoutSummary \r\n                            ingredients={this.props.ings}\r\n                            checkoutCancelled={this.checkoutCancelledHandler} \r\n                            checkoutContinued={this.checkoutContinuedHandler}\r\n                        />\r\n                        <Route path={this.props.match.path + '/contact-data'}  component={ContactData} />\r\n                       </div>\r\n                    );\r\n             }\r\n\r\n        return summary;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        purchased: state.order.purchased\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps)(Checkout);"],"sourceRoot":""}