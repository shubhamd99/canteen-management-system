{"version":3,"sources":["components/UI/Input/Input.js","containers/Auth/Auth.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","input","props","inputElement","inputClasses","invalid","shouldValidate","touched","push","elementType","a","createElement","Object","assign","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","label","Auth","state","controls","email","type","placeholder","validation","required","isEmail","valid","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","updateObject","_this","C_ShubhamDhage_burger_project_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","target","checkValidity","setState","submitHandler","preventDefault","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","_this2","formElementsArray","id","config","form","formElement","react__WEBPACK_IMPORTED_MODULE_6___default","_components_UI_Input_Input__WEBPACK_IMPORTED_MODULE_9__","loading","_components_UI_Spinner_Spinner__WEBPACK_IMPORTED_MODULE_11__","errorMessage","error","message","authRedirect","isAuthenticated","react_router_dom__WEBPACK_IMPORTED_MODULE_8__","to","onSubmit","react_bootstrap__WEBPACK_IMPORTED_MODULE_10__","variant","size","style","marginTop","onClick","Component","connect","auth","token","burgerBuilder","building","dispatch","actions"],"mappings":"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","file":"static/js/4.76370f78.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './Input.css';\r\n\r\n\r\nconst input = (props) => {\r\n\r\n    let inputElement = null;\r\n    const inputClasses = ['InputElement']\r\n\r\n    if(props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push('Invalid');\r\n    }\r\n\r\n    switch(props.elementType){\r\n        case ('input'):\r\n           inputElement = <input className={inputClasses.join(' ')} {...props.elementConfig} value={props.value} onChange={props.changed} />;\r\n           break;\r\n        case ('textarea'):\r\n            inputElement = <textarea className={inputClasses.join(' ')} {...props.elementConfig} value={props.value} onChange={props.changed}/>;\r\n            break;\r\n        case ('select'):\r\n            inputElement = (  <select className={inputClasses.join(' ')} value={props.value} onChange={props.changed}>\r\n                                {props.elementConfig.options.map(option => (\r\n                                    <option key={option.value} value={option.value}>{option.displayValue}</option>\r\n                                ))}\r\n                             </select>\r\n                           );\r\n            break;\r\n        default:\r\n            inputElement = <input className={inputClasses.join(' ')} {...props.elementConfig} value={props.value} />;\r\n    }\r\n\r\n    return(\r\n        <div className='Input'>\r\n            <label className='Label'>{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default input;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport Input from '../../components/UI/Input/Input';\r\nimport { Button } from 'react-bootstrap';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport './Auth.css';\r\nimport * as actions from '../../store/actions/index';\r\nimport { updateObject, checkValidity } from '../../shared/utility';\r\n\r\nclass Auth extends Component {\r\n\r\n    state = {\r\n        controls: {\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Your Email Address'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                  },\r\n                  valid: false,\r\n                  touched: false\r\n               },\r\n               password: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Your Password'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 7\r\n                  },\r\n                  valid: false,\r\n                  touched: false\r\n               }\r\n        },\r\n        isSignup: true \r\n    }\r\n\r\n    componentDidMount(){\r\n        if (!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\r\n            this.props.onSetAuthRedirectPath();\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    inputChangedHandler = (event, controlName) => {\r\n        const updatedControls = updateObject(this.state.controls, {\r\n            [controlName]: updateObject(this.state.controls[controlName], {\r\n                value: event.target.value,\r\n                valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\r\n                touched: true\r\n            } ) \r\n        });\r\n\r\n        this.setState({ controls: updatedControls });\r\n    }\r\n\r\n    submitHandler = (event) => {\r\n        event.preventDefault();\r\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup)\r\n    }\r\n\r\n    switchAuthModeHandler = () => {\r\n        this.setState(prevState => {\r\n            return{ isSignup: !prevState.isSignup };\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        const formElementsArray = [];\r\n        for (let key in this.state.controls) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.controls[key]\r\n            });\r\n        }\r\n\r\n        let form = formElementsArray.map(formElement => (\r\n            <Input \r\n                key={formElement.id}\r\n                elementType={formElement.config.elementType} \r\n                elementConfig={formElement.config.elementConfig}\r\n                value={formElement.config.value}\r\n                invalid={!formElement.config.valid}\r\n                shouldValidate={formElement.config.validation}\r\n                touched={formElement.config.touched}\r\n                changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n            />\r\n        ));\r\n\r\n        if(this.props.loading) {\r\n            form = <Spinner />\r\n        }\r\n\r\n        let errorMessage = null;\r\n        if(this.props.error){\r\n            errorMessage = (\r\n                <p>{this.props.error.message}</p>\r\n            )\r\n        }\r\n\r\n        let authRedirect = null;\r\n        if(this.props.isAuthenticated){\r\n            authRedirect = <Redirect to={this.props.authRedirectPath} />\r\n        }\r\n\r\n        return (\r\n            <div className='Auth'>\r\n            {authRedirect}\r\n            {errorMessage}\r\n                <form onSubmit={this.submitHandler}>\r\n                    <h2>Sign Up :</h2>\r\n                    {form}\r\n                    <Button variant=\"primary\" size=\"lg\" style={{marginTop: '10px'}} onClick={this.submitHandler}>Submit</Button>\r\n                </form>\r\n                <Button className='lower-button' variant=\"outline-primary\" onClick={this.switchAuthModeHandler}>\r\n                    SWITCH TO {this.state.isSignup ? 'SIGNIN' : 'SIGNUP'}\r\n                </Button>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        isAuthenticated: state.auth.token !== null,\r\n        buildingBurger: state.burgerBuilder.building,\r\n        authRedirectPath: state.auth.authRedirectPath\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\r\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);"],"sourceRoot":""}