{"version":3,"sources":["components/Order/Order.js","containers/Orders/Orders.js"],"names":["order","props","ingredients","ingredientName","push","name","amount","ingredientOutput","map","ig","react_default","a","createElement","key","style","textTransform","display","margin","border","padding","className","price","toFixed","Orders","this","onFetchOrders","token","userId","orders","Spinner","loading","Order_Order","id","Component","connect","state","auth","dispatch","actions","withErrorHandler","axios"],"mappings":"uLAkCeA,UA9BD,SAACC,GAEX,IAAMC,EAAc,GAEpB,IAAK,IAAIC,KAAkBF,EAAMC,YAC7BA,EAAYE,KACR,CACIC,KAAMF,EACNG,OAAQL,EAAMC,YAAYC,KAKtC,IAAMI,EAAmBL,EAAYM,IAAI,SAAAC,GACrC,OAAOC,EAAAC,EAAAC,cAAA,QAAMC,IAAKJ,EAAGJ,KACRS,MAAO,CAAEC,cAAe,aAAcC,QAAS,eAAgBC,OAAQ,QAASC,OAAQ,iBAAkBC,QAAS,QAEpHV,EAAGJ,KAHR,KAGgBI,EAAGH,OAHnB,OAOX,OACII,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,SACfV,EAAAC,EAAAC,cAAA,yBAAkBL,GAClBG,EAAAC,EAAAC,cAAA,mBAAUF,EAAAC,EAAAC,cAAA,qBAAcX,EAAMoB,MAAMC,QAAQ,GAAlC,2CCnBZC,8LAGCC,KAAKvB,MAAMwB,cAAcD,KAAKvB,MAAMyB,MAAOF,KAAKvB,MAAM0B,yCAIrD,IAAIC,EAASlB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,MAWb,OAVKL,KAAKvB,MAAM6B,UACZF,EAASJ,KAAKvB,MAAM2B,OAAOpB,IAAI,SAAAR,GAAK,OACxBU,EAAAC,EAAAC,cAACmB,EAAD,CACAlB,IAAKb,EAAMgC,GACX9B,YAAaF,EAAME,YACnBmB,OAAQrB,EAAMqB,WAM1BX,EAAAC,EAAAC,cAAA,WACIgB,UApBKK,aAyCNC,sBAfS,SAAAC,GACpB,MAAO,CACHP,OAAQO,EAAMnC,MAAM4B,OACpBE,QAASK,EAAMnC,MAAM8B,QACrBJ,MAAOS,EAAMC,KAAKV,MAClBC,OAAQQ,EAAMC,KAAKT,SAIA,SAAAU,GACvB,MAAO,CACHZ,cAAe,SAACC,EAAOC,GAAR,OAAmBU,EAASC,IAAoBZ,EAAOC,OAI/DO,CAA6CK,YAAiBhB,EAAQiB","file":"static/js/5.39ee7601.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './Order.css';\r\n\r\nconst order = (props) => {\r\n\r\n    const ingredients = [];\r\n\r\n    for (let ingredientName in props.ingredients) {\r\n        ingredients.push(\r\n            {\r\n                name: ingredientName,\r\n                amount: props.ingredients[ingredientName]\r\n            }\r\n        )\r\n    }\r\n\r\n    const ingredientOutput = ingredients.map(ig => {\r\n        return <span key={ig.name}  \r\n                     style={{ textTransform: 'capitalize', display: 'inline-block', margin: '0 8px', border: '1px solid #ccc', padding: '5px' }} \r\n                >\r\n                   {ig.name} ({ig.amount})\r\n                </span>\r\n    })\r\n\r\n    return(\r\n        <div className='Order'>\r\n        <p>Ingredients: { ingredientOutput }</p>\r\n        <p>Price: <strong>Rs. { props.price.toFixed(2) } /-</strong></p>\r\n        </div>\r\n    );\r\n    \r\n};\r\n\r\nexport default order;","import React, { Component } from 'react';\r\nimport { connect } from'react-redux';\r\n\r\nimport Order from '../../components/Order/Order';\r\nimport axios from '../../axios-orders';\r\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\r\nimport * as actions from '../../store/actions/index';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\n\r\nclass Orders extends Component {\r\n\r\n    componentDidMount(){\r\n       this.props.onFetchOrders(this.props.token, this.props.userId);\r\n    }\r\n\r\n    render() {\r\n        let orders = <Spinner />;\r\n        if (!this.props.loading) {\r\n            orders = this.props.orders.map(order => (\r\n                        <Order \r\n                        key={order.id}\r\n                        ingredients={order.ingredients}\r\n                        price={+order.price} />\r\n                    ) )\r\n\r\n        }\r\n\r\n        return (\r\n            <div>\r\n               {orders} \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        orders: state.order.orders,\r\n        loading: state.order.loading,\r\n        token: state.auth.token,\r\n        userId: state.auth.userId\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onFetchOrders: (token, userId) => dispatch(actions.fetchOrders(token, userId))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(Orders, axios)) ;"],"sourceRoot":""}